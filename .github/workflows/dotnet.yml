name: Build and Release Telegram CLI Client

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rid: [win-x64, linux-x64, osx-x64]
        include:
          - rid: win-x64
            extension: .exe
          - rid: linux-x64
            extension: ''
          - rid: osx-x64
            extension: ''

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore
    
    - name: Publish
      run: dotnet publish -c Release -r ${{ matrix.rid }} --self-contained true -p:PublishSingleFile=true -p:PublishTrimmed=true -o ./publish/${{ matrix.rid }}
    
    - name: Rename binary
      run: mv ./publish/${{ matrix.rid }}/tgcli${{ matrix.extension }} ./publish/${{ matrix.rid }}/tgcli-${{ matrix.rid }}${{ matrix.extension }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: telegram-cli-${{ matrix.rid }}
        path: ./publish/${{ matrix.rid }}/tgcli-${{ matrix.rid }}${{ matrix.extension }}
        
  release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Create README.md for release
      run: |
        echo "# Telegram CLI Client - $(echo ${{ github.ref_name }})" > ./release-notes.md
        echo "" >> ./release-notes.md
        echo "A non-interactive command-line client for sending Telegram messages." >> ./release-notes.md
        echo "" >> ./release-notes.md
        echo "## Available Builds" >> ./release-notes.md
        echo "- Windows (64-bit): tgcli-win-x64.exe" >> ./release-notes.md
        echo "- Linux (64-bit): tgcli-linux-x64" >> ./release-notes.md
        echo "- macOS (64-bit): tgcli-osx-x64" >> ./release-notes.md
        echo "" >> ./release-notes.md
        echo "For usage instructions, see the main README.md in the repository." >> ./release-notes.md
    
    - name: Make Linux and macOS binaries executable
      run: |
        chmod +x ./artifacts/tgcli-linux-x64/tgcli-linux-x64
        chmod +x ./artifacts/tgcli-osx-x64/tgcli-osx-x64
        
    - name: Create release ZIP files
      run: |
        mkdir ./release
        cd ./artifacts/tgcli-win-x64/ && zip -r ../../release/tgcli-win-x64.zip tgcli-win-x64.exe && cd ../../
        cd ./artifacts/tgcli-linux-x64/ && zip -r ../../release/tgcli-linux-x64.zip tgcli-linux-x64 && cd ../../
        cd ./artifacts/tgcli-osx-x64/ && zip -r ../../release/tgcli-osx-x64.zip tgcli-osx-x64 && cd ../../
    
    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./release/*.zip
          ./release-notes.md
        body_path: ./release-notes.md
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
